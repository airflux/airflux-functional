public final class io/github/airflux/functional/NonFatalKt {
	public static final fun isFatal (Ljava/lang/Throwable;)Z
}

public abstract class io/github/airflux/functional/Result {
	public static final field Companion Lio/github/airflux/functional/Result$Companion;
}

public final class io/github/airflux/functional/Result$Companion {
	public final fun getAsEmptyList ()Lio/github/airflux/functional/Result$Success;
	public final fun getAsFalse ()Lio/github/airflux/functional/Result$Success;
	public final fun getAsNull ()Lio/github/airflux/functional/Result$Success;
	public final fun getAsTrue ()Lio/github/airflux/functional/Result$Success;
	public final fun getAsUnit ()Lio/github/airflux/functional/Result$Success;
	public final fun of (Z)Lio/github/airflux/functional/Result$Success;
}

public final class io/github/airflux/functional/Result$Error : io/github/airflux/functional/Result {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Error;
	public static synthetic fun copy$default (Lio/github/airflux/functional/Result$Error;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/functional/Result$Error;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCause ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/github/airflux/functional/Result$Raise {
	public abstract fun bind (Lio/github/airflux/functional/Result;)Ljava/lang/Object;
	public fun component1 (Lio/github/airflux/functional/Result;)Ljava/lang/Object;
}

public final class io/github/airflux/functional/Result$Success : io/github/airflux/functional/Result {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Success;
	public static synthetic fun copy$default (Lio/github/airflux/functional/Result$Success;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/functional/Result$Success;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/functional/ResultDSLKt {
	public static final fun Result (Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun failureOrRethrow (Lio/github/airflux/functional/ResultRaiseException;Lio/github/airflux/functional/ResultRaise;)Lio/github/airflux/functional/Result$Error;
}

public final class io/github/airflux/functional/ResultKt {
	public static final fun andThen (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun asError (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Error;
	public static final fun asSuccess (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Success;
	public static final fun error (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Error;
	public static final fun flatMap (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun fold (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun forEach (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)V
	public static final fun getOrElse (Lio/github/airflux/functional/Result;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getOrElse (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrForward (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrNull (Lio/github/airflux/functional/Result;)Ljava/lang/Object;
	public static final fun isError (Lio/github/airflux/functional/Result;)Z
	public static final fun isError (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Z
	public static final fun isSuccess (Lio/github/airflux/functional/Result;)Z
	public static final fun isSuccess (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Z
	public static final fun map (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun mapError (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun merge (Lio/github/airflux/functional/Result;)Ljava/lang/Object;
	public static final fun onError (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun onSuccess (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun orElse (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/functional/Result;
	public static final fun orThrow (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun recover (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun recoverWith (Lio/github/airflux/functional/Result;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
	public static final fun sequence (Ljava/lang/Iterable;)Lio/github/airflux/functional/Result;
	public static final fun success (Ljava/lang/Object;)Lio/github/airflux/functional/Result$Success;
	public static final fun traverse (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
}

public final class io/github/airflux/functional/ResultRaise : io/github/airflux/functional/Result$Raise {
	public fun <init> ()V
	public fun bind (Lio/github/airflux/functional/Result;)Ljava/lang/Object;
}

public abstract class io/github/airflux/functional/Try {
	public static final field Companion Lio/github/airflux/functional/Try$Companion;
}

public final class io/github/airflux/functional/Try$Companion {
	public final fun getAsEmptyList ()Lio/github/airflux/functional/Try;
	public final fun getAsFalse ()Lio/github/airflux/functional/Try;
	public final fun getAsNull ()Lio/github/airflux/functional/Try;
	public final fun getAsTrue ()Lio/github/airflux/functional/Try;
	public final fun getAsUnit ()Lio/github/airflux/functional/Try;
	public final fun of (Z)Lio/github/airflux/functional/Try;
	public final fun wrap (Lkotlin/jvm/functions/Function0;)Lio/github/airflux/functional/Try;
	public final fun wrapWith (Lkotlin/jvm/functions/Function0;)Lio/github/airflux/functional/Try;
}

public final class io/github/airflux/functional/Try$Failure : io/github/airflux/functional/Try {
	public fun <init> (Ljava/lang/Throwable;)V
	public final fun getException ()Ljava/lang/Throwable;
}

public abstract interface class io/github/airflux/functional/Try$Raise {
	public abstract fun bind (Lio/github/airflux/functional/Try;)Ljava/lang/Object;
	public fun component1 (Lio/github/airflux/functional/Try;)Ljava/lang/Object;
	public abstract fun raise (Ljava/lang/Throwable;)Ljava/lang/Void;
}

public final class io/github/airflux/functional/Try$Success : io/github/airflux/functional/Try {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getResult ()Ljava/lang/Object;
}

public final class io/github/airflux/functional/TryDSLKt {
	public static final fun failureOrRethrow (Lio/github/airflux/functional/TryRaiseException;Lio/github/airflux/functional/TryRaise;)Lio/github/airflux/functional/Try;
	public static final fun run (Lio/github/airflux/functional/Try$Companion;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun runWith (Lio/github/airflux/functional/Try$Companion;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
}

public final class io/github/airflux/functional/TryExtensionsKt {
	public static final fun toResult (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Result;
}

public final class io/github/airflux/functional/TryKt {
	public static final fun flatMap (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun fold (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrElse (Lio/github/airflux/functional/Try;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getOrElse (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrForward (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrNull (Lio/github/airflux/functional/Try;)Ljava/lang/Object;
	public static final fun isError (Lio/github/airflux/functional/Try;)Z
	public static final fun isError (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Z
	public static final fun isSuccess (Lio/github/airflux/functional/Try;)Z
	public static final fun isSuccess (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Z
	public static final fun map (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun onFailure (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun onSuccess (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun orElse (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/functional/Try;
	public static final fun orThrow (Lio/github/airflux/functional/Try;)Ljava/lang/Object;
	public static final fun orThrow (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun recover (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun recoverWith (Lio/github/airflux/functional/Try;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
	public static final fun sequence (Ljava/lang/Iterable;)Lio/github/airflux/functional/Try;
	public static final fun traverse (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/functional/Try;
}

public final class io/github/airflux/functional/TryRaise : io/github/airflux/functional/Try$Raise {
	public fun <init> ()V
	public fun bind (Lio/github/airflux/functional/Try;)Ljava/lang/Object;
	public fun raise (Ljava/lang/Throwable;)Ljava/lang/Void;
}

